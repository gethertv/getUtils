# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install xmllint
      run: sudo apt-get update && sudo apt-get install -y libxml2-utils

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: List contents of target directory
      run: ls -la target

    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

    # Extract version from pom.xml
    - name: Extract version from pom.xml
      id: extract_version
      run: |
        version=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" pom.xml)
        echo "Version found in pom.xml: $version"
        echo "version=$version" >> $GITHUB_ENV

    # Ensure the .jar file exists in the target directory
    - name: Check if JAR was generated
      run: ls -la target

    # Create a GitHub release after a successful build
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.version }}
        release_name: "getUtils ${{ env.version }}"
        draft: false
        prerelease: false

    # Upload the built package to the release
    - name: Upload JAR to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/getUtils-${{ env.version }}.jar 
        asset_name: getUtils-${{ env.version }}.jar          
        asset_content_type: application/java-archive

